import os
import hashlib
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad

def aes_encrypt_file(input_file_path):
    # Step 1: Generate a 16-byte random number using urandom
    random_16_bytes = os.urandom(16)
    random_16_digits_hex = ''.join(f'{byte:02x}' for byte in random_16_bytes)
    print(f"Generated 16-digit random (hex): {random_16_digits_hex}")

    # Step 2: Generate a SHA-256 hash of the random number
    sha256_key = hashlib.sha256(random_16_bytes).digest()
    sha256_key_hex = ''.join(f'{byte:02x}' for byte in sha256_key)
    print(f"SHA-256 Key (hex): {sha256_key_hex}")

    # Step 3: Generate a random 16-byte AES key for additional use
    random_aes_key = get_random_bytes(16)
    random_aes_key_hex = ''.join(f'{byte:02x}' for byte in random_aes_key)
    print(f"Generated 16-byte AES Key (hex): {random_aes_key_hex}")

    # Step 4: Generate a random IV (Initialization Vector)
    iv = get_random_bytes(16)

    # Step 5: Create AES cipher in CBC mode with the SHA-256 key
    cipher = AES.new(sha256_key, AES.MODE_CBC, iv)

    # Step 6: Read the input file data
    with open(input_file_path, 'rb') as input_file:
        file_data = input_file.read()

    # Step 7: Pad the file data to be a multiple of the block size
    padded_data = pad(file_data, AES.block_size)

    # Step 8: Encrypt the padded data
    encrypted_data = cipher.encrypt(padded_data)

    # Combine the IV and encrypted data
    combined_data = iv + encrypted_data

    # Convert the combined IV and encrypted data to hex format
    encrypted_hex = ''.join(f'{byte:02x}' for byte in combined_data)
    print(f"Encrypted Data (hex): {encrypted_hex}")

if __name__ == "__main__":
    input_file = input("Enter the path to the file to encrypt: ")
    
    try:
        aes_encrypt_file(input_file)
    except Exception as e:
        print(f"Error: {e}")
